// <auto-generated />
using System;
using ClinicaXPTO.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicaXPTO.DAL.Migrations
{
    [DbContext(typeof(ClinicaContext))]
    partial class ClinicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.ActType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ActTypes");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.AnonymousRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FotografiaUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Genero")
                        .HasColumnType("int");

                    b.Property<string>("Morada")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NumeroUtente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("AnonymousRequests");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.AppointmentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnonymousRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DataPedido")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnonymousRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentRequests");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.AppointmentRequestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DataAgendada")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataFimSolicitado")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataInicioSolicitado")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("HoraAgendada")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("HoraSolicitada")
                        .HasColumnType("time");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subsystem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActTypeId");

                    b.HasIndex("AppointmentRequestId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("AppointmentRequestItems");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Especialidade")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FotografiaUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Genero")
                        .HasColumnType("int");

                    b.Property<string>("Morada")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NumeroUtenteSaude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.AppointmentRequest", b =>
                {
                    b.HasOne("ClinicaXPTO.MODEL.Entities.AnonymousRequest", "AnonymousRequest")
                        .WithMany("Requests")
                        .HasForeignKey("AnonymousRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClinicaXPTO.MODEL.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AnonymousRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.AppointmentRequestItem", b =>
                {
                    b.HasOne("ClinicaXPTO.MODEL.Entities.ActType", "ActType")
                        .WithMany("RequestItems")
                        .HasForeignKey("ActTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaXPTO.MODEL.Entities.AppointmentRequest", "AppointmentRequest")
                        .WithMany("Items")
                        .HasForeignKey("AppointmentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaXPTO.MODEL.Entities.Professional", "Professional")
                        .WithMany("RequestItemsSolicitados")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ActType");

                    b.Navigation("AppointmentRequest");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.ActType", b =>
                {
                    b.Navigation("RequestItems");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.AnonymousRequest", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.AppointmentRequest", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.Professional", b =>
                {
                    b.Navigation("RequestItemsSolicitados");
                });

            modelBuilder.Entity("ClinicaXPTO.MODEL.Entities.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
